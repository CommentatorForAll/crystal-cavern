# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{
  config,
  lib,
  pkgs,
  modulesPath,
  ...
}:

{
  imports = [ (modulesPath + "/installer/scan/not-detected.nix") ];

  boot.initrd.availableKernelModules = [
    "nvme"
    "xhci_pci"
    "ahci"
    "usbhid"
    "usb_storage"
    "sd_mod"
  ];
  boot.initrd.kernelModules = [ "dm-snapshot" ];
  boot.kernelModules = [
    "kvm-amd"
    "wl"
  ];
  boot.kernelParams = [ "nvidia-drm.fbdev=1" ];
  boot.supportedFilesystems = [ "ntfs" ];
  boot.extraModulePackages = [ config.boot.kernelPackages.broadcom_sta ];

  fileSystems."/" = {
    device = "/dev/disk/by-uuid/f1cde3ec-dfeb-4a82-8325-01be6f56d859";
    fsType = "ext4";
  };

  fileSystems."/boot" = {
    device = "/dev/disk/by-uuid/F8EB-E167";
    fsType = "vfat";
    options = [
      "fmask=0022"
      "dmask=0022"
    ];
  };

  swapDevices = [ { device = "/dev/disk/by-uuid/94ed6f16-3e03-4e3c-b993-acda2ca7aa25"; } ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp24s0.useDHCP = lib.mkDefault true;

  hardware.opengl.enable = true;
  hardware.opengl.driSupport = true;
  hardware.opengl.driSupport32Bit = true;

  nixpkgs.config.allowUnfree = true;

  # Load nvidia driver for Xorg and Wayland
  services.xserver.videoDrivers = [ "nvidia" ];
<<<<<<< Updated upstream
  hardware.opengl.extraPackages = with pkgs; [
    (pkgs.libva-vdpau-driver or pkgs.vaapiVdpau)
    libglvnd
  ];
||||||| Stash base
  hardware.opengl.extraPackages = [
    (pkgs.libva-vdpau-driver or pkgs.vaapiVdpau)
  ];
=======
  hardware.opengl.extraPackages = [ (pkgs.libva-vdpau-driver or pkgs.vaapiVdpau) ];
>>>>>>> Stashed changes

  hardware.nvidia = {

    # Modesetting is required.
    modesetting.enable = true;

    package = config.boot.kernelPackages.nvidiaPackages.stable;

    # Nvidia power management. Experimental, and can cause sleep/suspend to fail.
    # Enable this if you have graphical corruption issues or application crashes after waking
    # up from sleep. This fixes it by saving the entire VRAM memory to /tmp/ instead
    # of just the bare essentials.
    powerManagement.enable = false;

    # Fine-grained power management. Turns off GPU when not in use.
    # Experimental and only works on modern Nvidia GPUs (Turing or newer).
    powerManagement.finegrained = false;

    # the OpenSource driver by Nvidia (not nouveau)
    open = false;

    nvidiaSettings = true;
  };

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.amd.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}
